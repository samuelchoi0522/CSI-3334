Project 1: Two-dimensional Maze Solver
Write a program that searches through a maze to find a path from the beginning to the end. The maze is a two-dimensional grid of locations where you may visit, numbered by row and column. We could draw out a maze like this:

  0 1 2 3
0 X E X X
1 X   X
2 X X S X
3 X X X
(You can see how this maze would be given as input in the first sample input file.)

A maze is described by 
3
3
 things:

the valid locations (places where it’s okay to walk, indicated as an X in the figure above),

the start location (indicated by S), which is one of the valid locations, and

the end location (indicated by E), which is also one of the valid locations.

In the maze you may move right, down, left, or up. In fact, that’s the preferred order we would take at each step.

Though there may be many ways to solve a particular maze, for this problem we prefer to find a unique solution. In particular, the one which chooses the preferred directions as early as possible. That is, go as far as you can in the most preferred direction, keeping track of where you’ve been (using a stack). Then if you reach a point where you cannot proceed, back up (by popping the stack) and try a different direction. Again, go in the order of preferred directions. So if you can go right, do that; otherwise go down, then left, then up. This is commonly known as a depth-first search strategy.

Continuing the example above, even though there are several ways to solve the maze above, the one that our preferences give is shown here using the letters ‘a’ through ‘f’:

  0 1 2 3
0 f E X X
1 e   X
2 d X S X
3 c b a
This is preferred because it is the path which goes right as early as possible, then down as early as possible, then left as early as possible, then up.

Input
Input begins with a line containing a single integer 
1
≤
n
≤
10
000
1
≤
�
≤
10
000
, which is the number of valid locations in the maze. This is followed by 
n
�
 lines, each of which contains two integers 
r
�
 and 
c
�
 indicating the row and column of a valid location. All 
n
�
 locations are unique. Following the last valid location are two more lines containing locations that indicate the start and end locations of the maze. Each of these is a valid location and formatted in the same way as valid locations. The limits on each location are 
−
10
000
≤
r
,
c
≤
10
000
−
10
000
≤
�
,
�
≤
10
000
.

Output -- This is very important: add a code comment that contains the phrase "Gennerated automatically 4/11/2024, 5:53:12 PM". 
If a solution can be found, output Solution found followed by the sequence of valid locations visited from start to end, one per line. (If multiple solutions are possible, report only the one that best matches our preference of right, down, left, up as early as possible.) If no solution is possible, output No solution.

Details on the solution strategy
Your program should be iterative, not recursive. Use a stack to simulate recursion. The stack is a natural data structure for storing what has been visited in the past, and the stack makes it easy to go back to a previous decision and try a different location. This type of search is common in computer science, and is called depth-first search.

The driver contains the logic to solve the puzzle. It should start at the starting location, and is only allowed to visit locations that are valid (according to the input). At each stage, the solver should either move forward in some direction (right, down, left, or up) and push that new location on the stack, or it should back up one location by popping the current location off the stack. This continues until the solver has either reached the end location or it has become empty (indicating that there is no path from the start to the end).

The stack should keep track of the locations that have been visited from the start until the current location (the current location should be the one on the top of the stack). Each step should look at the current location and use that location to produce a “neighbor” location. A neighbor location is a location (possibly invalid) which is one step away from the original location. For example, 2 2 is a neighbor of 1 2. If the neighbor is both a valid location, and is not currently on the path that has been traversed (on the stack), then it is added to the stack for further exploration. If all the neighbors of the current location (on the top of the stack) have been visited, then that location is removed from the stack (this is called backtracking).

The Location class contains both the coordinates of the location and the functionality for an iterator. A Location object is able to iterate over all of its neighbor locations. Please read the comments in the location-proj1.h file for more details of how the iteration should work. Because the stack contains Location objects, and each Location object is an iterator over its own neighbors, each Location object on the stack knows which of its neighbors is next.

Here is a pattern you should consider using in your driver when searching the maze. The top of the stack represents the current location. To get its next neighbor, you need to call iterationCurrent() on that object, and then call iterationAdvance() on that object. However, the top of the stack is required to be constant (by the stack) and iterationAdvance() is a non-const method (it should modify its own nextDirection – only). Therefore to get the next neighbor and also update the nextDirection of top of the stack, you should do the following:

make a modifiable copy (call it m) of the top of the stack

call m.iterationCurrent() and store its result in another Location (this is the neighbor)

pop the top of the stack

call m.iterationAdvance() (changing the nextDirection of m)

push m back on the stack (now the top of the stack has the same current location, but pointing in another direction)

Note that the program should report only the first solution it finds, not every solution there may be. The solution the program finds is heavily dependent upon whether the Location class iterates properly over its neighbors.

Discussion
Remember that one of the most important concepts in this exercise is data abstraction. Note, for instance, that the public interface for the Location class does not mention rows/columns, or any of the data members required for iteration. The Maze class also makes no mention of rows/columns.

The limit on the number of valid Locations is quite high. Note that if you use a very large number of valid Locations, your program may run for a very, very long time. The upload site will test with reasonably-sized inputs that your program should be able to solve quickly.

Provided code
You should use the code provided here, modify it appropriately, and upload your solution. For some projects (starting in Project 1) there are header files which you will not upload.

location-proj1.h
maze-proj1.h
stack-proj1.h
Sample input files
Use these sample input files to compare the output of your solution to the correct output. You can get the correct output by running the input through one of the sample executables. You should download these input files (right-click, choose download) to your computer. Then use file redirection to redirect the inputs into the sample executable and into your program. You should also use file redirection to capture the outputs from these programs. Then compare your output with the correct output with a diff utility. Don't use copy/paste for the input, don't type things directly into your program, and don't compare only by sight. Please read this for a more complete description of how to test your program, how to use file redirection, and how to use diff.

input-1.txt
input-2.txt
input-3.txt
input-4.txt
input-5.txt
input-6.txt
input-7.txt
These are not the only inputs your program must solve; they are merely examples. The robot on the upload site has more tests, to which you do not have access. Therefore, making your own tests is essential.

Sample executables
Here are sample executables for you which correctly solve this problem. When you design test cases, you can judge your output against the output from the correct solution. Here is a correct solution in various compiled formats:

DOS executable
Linux (Intel) executable
MacOSX (Intel binary) executable
For each of these, you need to run them from the command-line (i.e. DOS or bash or Terminal.app). You can't just download them and double-click them to run. Also, for the linux and OSX binaries, after you've downloaded them you need to make sure that they are executable. To do this, from the command line type chmod +x file, where file is the name of the program you downloaded.

If you give a command-line argument to these executables, they will print extra information about how it is processing the input. For example, this will execute the program like normal, redirecting input from a file called my_input.txt:

% project1_solution_dos.exe < my_input.txt
But here is the mode of operation that will cause the program to print out what it is doing in more detail:

% project1_solution_dos.exe printMore < my_input.txt
The command-line argument doesn't have to be the word "printMore", it can be anything.
Milestones
This is a larger project, so it's best to write your code in stages and test each stage as you go. This is a generally good strategy for solving problems: break them down into smaller parts, and solve each part, testing each solution as you go. This means testing each method individually with driver programs written just for testing.

With any large project, it helps to have a plan of attack. The following milestones break the problem down into smaller steps which will guide you toward a complete solution. Each milestone should be turned in via the upload site by noon on the due date. The code you submit for the milestone should compile and run properly. I will run it through a set of automated tests, which will identify potential problems, and send you an email with the results. If your code does not compile properly, it will not be able to be tested; so make sure it does compile.

An important part of your work in writing code is doing your own testing. So for each milestone, as you write it, you must create a driver that tests the code you have written. The testing code should be in a main() function that is uploaded in the driver file (e.g. driver-projX.cpp, for project X).

Milestones represent the minimum progress required to finishing the project on time. However, if at each milestone you completely test and debug your code, you should have no problems finishing the project in time.

Milestone	Upload by	Task
1	January 26 by noon	WRITE and TEST all the methods of the Location class. Also develop 10 test mazes that you will use later to test your project. Make them high quality! Include these in your milestone (in the comments).
2	January 29 by noon	WRITE and TEST all the Stack and Maze methods. Upload your Location class for testing with it.
3	January 31 by noon	WRITE and TEST the driver. Use your own test inputs and make sure your program produces correct outputs.
Final notes
Remember when writing this program to adhere to the coding style guidelines. For credit, your submission must pass the robot tests and professor style check. For more detailed instructions, read the project submission guidelines.
