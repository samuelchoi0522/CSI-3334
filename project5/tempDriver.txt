#include "arrayheap-student-proj5.h"
#include "process-proj5.h"
#include <iostream>
#include <iomanip>

using namespace std;

int main(){
    ArrayHeap<Process> processHeap;
    int finalSystemTime = 0;
    int finalProcessesRun = 0;
    int finalProcessesSkipped = 0;

    int numProcesses;
    cin >> numProcesses;

    for(int i = 0; i < numProcesses; i++){
        Process currProcess(i);
        cin >> currProcess;
        cout << "DEBUG: read process line \'" << currProcess << "\'" << endl;

        if(currProcess.getSubmissionTime() <= finalSystemTime){
            cout << "DEBUG: inserting process ID " << currProcess.getId() << " into the heap" << endl;
            processHeap.insert(currProcess);
        }

        else if(processHeap.getNumItems() == 0){
            finalSystemTime = currProcess.getSubmissionTime();
            cout << "DEBUG: fast-forwarding clock to next process start time" << endl;
            cout << "DEBUG: inserting process ID " << currProcess.getId() << " into the heap" << endl;
            processHeap.insert(currProcess);
        }
        else{
            while(processHeap.getNumItems() != 0){
                Process highestPri = processHeap.getMinItem();

                cout << "DEBUG: the heap has " << processHeap.getNumItems() << " items; top priority is process ID " << highestPri.getId() << endl;

                processHeap.removeMinItem();
                if(highestPri.canComplete(finalSystemTime)){
                    finalSystemTime = highestPri.run(finalSystemTime);

                    finalProcessesRun++;
                }
                else{
                    cout << "skipping process id " << highestPri.getId() << " at " << finalSystemTime << endl;

                    finalSystemTime++;

                    finalProcessesSkipped++;
                }
                

                if(currProcess.getSubmissionTime() <= finalSystemTime && currProcess.getId() != highestPri.getId()){
                    cout << "DEBUG: inserting process ID " << currProcess.getId() << " into the heap" << endl;
                    processHeap.insert(currProcess);
                    break;
                }
                else if(processHeap.getNumItems() == 0){
                    finalSystemTime = currProcess.getSubmissionTime();
                    cout << "DEBUG: fast-forwarding clock to next process start time" << endl;
                    cout << "DEBUG: inserting process ID " << currProcess.getId() << " into the heap" << endl;
                    processHeap.insert(currProcess);
                    break;
                }
            }
        }
        
    }

    while(processHeap.getNumItems() != 0){
        Process highestPri = processHeap.getMinItem();

        cout << "DEBUG: the heap has " << processHeap.getNumItems() << " items; top priority is process ID " << highestPri.getId() << endl;

        processHeap.removeMinItem();

        if(highestPri.canComplete(finalSystemTime)){
            finalSystemTime = highestPri.run(finalSystemTime);

            finalProcessesRun++;
        }
        else{
            cout << "skipping process id " << highestPri.getId() << " at " << finalSystemTime << endl;

            finalSystemTime++;

            finalProcessesSkipped++;
        }
        
    }


    cout << "final clock is                 " << finalSystemTime << endl;
    cout << "number of processes run is     " << finalProcessesRun << endl;
    cout << "number of processes skipped is " << finalProcessesSkipped << endl;

    return 0;
}