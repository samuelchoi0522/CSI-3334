Project 5: Real-Time Batch Operating System Simulator
An operating system (OS) is a program that manages all running programs (aka processes) on a computer. The OS decides which process gets to execute, and when. This is called process scheduling.

A batch OS is one which runs one whole program, then runs another whole program, etc. Batch operation is an older, simpler approach to scheduling in an OS. (A modern, non-batch OS appears to run multiple processes at the same time by switching back and forth between them.)

An OS is real-time if it makes guarantees about when processes will be executed. For example, it might promise to finish a process by a certain deadline.

For this project, we’ll implement a program which simulates a batch OS (running one process at a time) with real-time guarantees about when processes will finish. Each process has several attributes:

An ID, which is assigned by the OS. The first process has ID 
0
0
, the second has ID 
1
1
, and so on.

A submission time, which is the time when the user submits the process to the OS. Clearly, no process could run before it is submitted, but it could run any time at or after that.

A duration, which describes how long it takes the process to run, in terms of units of time.

A deadline time, which describes the time by which the process must finish (i.e. the time at which it starts running, plus the duration, must be at most the deadline).

Some information, which is a string the process prints when it runs.

The submission time and deadline time should be thought of as timestamps which are relative to when the OS started (at time 
0
0
), while the duration is a length of time (using the same units). So, for example, if a process is submitted at time 
10
10
 and has duration 
20
20
 and deadline 
50
50
, then it cannot be run until time 
10
10
, but could be run any time from 
10
10
 (when it was submitted) until (and including) time 
30
30
 (because 
30
+
20
=
50
30
+
20
=
50
, the deadline).

A batch OS might schedule processes in different ways:

First-in-first-out. That is, the OS orders processes by their submission order (earliest first).

Shortest-first. That is, the OS orders processes by their durations (shortest to longest). This improves overall throughput.

Earliest-deadline-first. That is, order processes by their deadlines, with earliest deadlines before later deadlines. This is important in real-time OSes.

Our simulator combines these ideas by ordering first by deadline, then by length (if there is a tie for deadline), and then by submission order (the last tiebreaker).

Design
The driver for this project coordinates the OS simulator. Here are some important details on how the driver should operate:

System time: The driver keeps track of the current time with an integer. It starts at 
0
0
 and increases each time the OS runs or skips a process.

Submitted processes kept in priority order: The driver keeps processes that are ready to run in memory, in a priority queue. For the priority queue, we’ll use a heap.

The OS does not know the future: The driver does not read in all the processes and immediately put them into the heap. Instead, it should only put a process into the heap once its submission time has been reached (or passed). This means that as long as there is a process remaining to be read, the driver will need to read one process ahead in the input, so that it knows what the submission time of the next process is.

Run (or skip) the one highest-priority process: The driver takes the highest-priority process out of the priority queue and either runs it (if it is possible to complete running by its deadline) or skips it (otherwise). When running a process, the OS time increases by the duration of the process. When skipping a process, the OS time increases by 
1
1
. The driver should not try to run/skip more than one process each iteration (because of the next item about time changes).

Whenever the time changes, more processes may have been submitted: Each time the OS time changes, the driver should check for any process(es) whose submission times have been reached, and thus the process(es) are now ready to run. If there are any, the driver should read them in as needed and add them to the priority queue.

So you might consider structuring the driver in the following way (at a very high level, leaving out a number of details and edge cases):

while not done:

put on the heap all processes that have been submitted (according to the current time) but are not yet on the heap

extract the one highest priority process on the heap, and run it or skip it

The simulator uses two primary data structures:

An array-based heap, which stores the processes that are ready to run, in priority order. Therefore, the next process that the OS should consider is always easy to access.

A Process class, which stores all the information for a single process, and can compare two processes by the priority rules explained above.

Input
The first line of input is the number of processes 
n
�
, where 
1
≤
n
≤
10
000
1
≤
�
≤
10
000
. The remaining 
n
�
 lines each describe one process. Each line describing a process has three integers 
s
�
, 
d
�
, and 
r
�
 and a text description 
i
�
. They are as follows:

0
≤
s
≤
1
000
000
0
≤
�
≤
1
000
000
 is the submission time (in ticks) of the process. That is, it is the time (in ticks) when the user submitted the process to the OS.

0
≤
d
≤
1
000
000
0
≤
�
≤
1
000
000
 is the deadline time (in ticks) of the process. That is, it is the time by which the process must finish.

1
≤
r
≤
1
000
000
1
≤
�
≤
1
000
000
 is the amount of time (in ticks) required to execute the process.

The string 
i
�
 has between 
1
1
 and 
100
100
 characters (spaces and English letters), and ends at the end of the line. It begins and ends with a letter. It is the ‘information’ that should be printed when (if) the process runs.

The processes are guaranteed to come in order of submission time.

Output -- This is very important: add a code comment that contains the phrase "Gennerated automatically 4/11/2024, 6:25:10 PM". 
For each process that is run, print running process id X at Y, where X is the id of the process, and Y is the value of the OS clock when the process starts running. Then on the next line print the process’ information.

For each process that is skipped, print skipping process id X at Y, where X and Y are as described just above.

After the simulation finishes, print a summary, formatted as

final clock is                 Y
number of processes run is     A
number of processes skipped is B
where here Y is the ending OS clock value, and A and B are respectively the numbers of processes that are run and skipped.

Explanation of Samples
Sample case 
1
1
:

Time = 
0
0
. The driver reads in the first process (giving it ID 
0
0
) and discovers that its submission time is 
10
10
. This process is not yet added to the heap (the clock has not reached its submission time yet). Since there are no processes on the heap (to be run or skipped), the OS moves the clock forward to 
10
10
, and process ID 
0
0
 is inserted into the heap.

Time = 
10
10
. Since the clock has changed (from 
0
0
 to 
10
10
), the driver reads in the next process, which has a submission time of 
11
11
, and gives it ID 
1
1
. Since the clock has not reached 
11
11
, process ID 
1
1
 is held back in a local variable (it is not added to the heap yet).

Time = 
10
10
. Ask the heap for its minimum item (ID 
0
0
), and determine that the process can complete; so run that process. The clock advances to 
15
15
 (since the duration was 
5
5
).

Time = 
15
15
. Now that the submission time for process ID 
1
1
 has passed, add it into the heap. Then read in three more processes with IDs 
2
2
 through 
4
4
, since they have submission times 
≤
15
≤
15
, and put them all on the heap.

Time = 
15
15
. The top of the heap is the process with ID 
1
1
, so that is removed and run. The time advances by 
5
5
 ticks to 
20
20
.

Time = 
20
20
. The highest-priority process is ID 
2
2
, but it cannot finish in time (its deadline is 
20
20
), so it is skipped, and the time advances by 
1
1
 tick to 
21
21
.

Time = 
21
21
. The highest-priority process is ID 
3
3
, but it cannot finish in time (its deadline is 
20
20
), so it is skipped, and the time advances by 
1
1
 tick to 
22
22
.

Time = 
22
22
. The highest-priority process is ID 
4
4
. Its deadline is 
30
30
, and its duration is 
5
5
, so it can run. So it is run, and the time advances by 
5
5
 ticks to 
27
27
.

Sample case 
2
2
:

Time = 
0
0
. The first process is read in and given ID 
0
0
. It has a submission time of 
0
0
, so it is placed on the heap. The next process is then read in (with ID 
1
1
), but its submission time is 
20
20
, so it is held back in a local variable and not added to the heap. Process ID 
0
0
 is the (only) highest-priority process on the heap, so it is run and removed from the heap, and the time advances by 
9
9
 ticks to 
9
9
.

Time = 
9
9
. There are no processes on the heap, so the clock is advanced to 
20
20
. Then the process ID 
1
1
 is placed on the heap.

Time = 
20
20
. We read in process ID 
2
2
, with submission time of 
22
22
. It is not placed on the heap. Now, the highest priority process on the heap is removed and run. The time advances by 
5
5
 ticks to 
25
25
.

Time = 
25
25
. Process ID 
2
2
 is added to the heap. Process ID 
3
3
 is read in with submission time 
29
29
, but not placed on the heap. Process ID 
2
2
 is the highest priority (and only) process, but it cannot complete before its deadline, so it is skipped. The time advances by 
1
1
 tick to 
26
26
.

Time = 
26
26
. The heap is empty and no processes are submitted until time 
29
29
, so the clock is advanced to 
29
29
.

Time = 
29
29
. Process ID 
3
3
 is placed on the heap. Process ID 
4
4
 is read in with submission time 
41
41
, so it is not placed on the heap. Process ID 
3
3
 is the highest priority process, but cannot complete, so it is skipped. The time advances by 
1
1
 tick to 
30
30
.

Time = 
30
30
. The heap is empty and no processes are submitted until time 
41
41
, so the clock is advanced to 
41
41
.

Time = 
41
41
. Process ID 
4
4
 is placed on the heap. Process ID 
5
5
 is read in with submission time 
58
58
, so it is not yet added to the heap. Process ID 
4
4
 is removed from the heap and then run. The time advances by 
9
9
 ticks to 
50
50
.

Time = 
50
50
. The heap is empty and no processes are submitted until time 
58
58
, so the clock is advanced to 
58
58
.

Time = 
58
58
. Process ID 
5
5
 is placed on the heap. Process ID 
6
6
 is read in with submission time of 
60
60
; it is not yet added to the heap. Process ID 
5
5
 is removed from the heap and then run. The time advances by 
9
9
 ticks to 
67
67
.

Time = 
67
67
. Process ID 
6
6
 has a submission time of 
60
60
, so it is placed on the heap. There are no more processes to read in. Process ID 
6
6
 is removed from the heap and then run. The time advances by 
1
1
 tick to 
68
68
.

Sample case 
3
3
:

Time = 
0
0
. One process has submission time 
0
0
, so it is read in, given ID 
0
0
, and placed on the heap. Process ID 
1
1
 with submission time 
10
10
 is read in but not yet added to the heap. Process ID 
0
0
 is the (only) highest-priority process, so it is run, and the time advances by 
10
10
 ticks to 
10
10
.

Time = 
10
10
. Three processes are submitted at time 
10
10
, including process ID 
1
1
 which was already read in. The remaining two are read in and given IDs 
2
2
 and 
3
3
, and all three are placed on the heap. Process ID 
4
4
 is read in with submission time 
11
11
, so it is not yet added to the heap. The highest-priority process is the one with the earliest deadline (ID 
1
1
 with deadline 
20
20
). Process ID 
1
1
 is removed and run. The time advances by 
10
10
 ticks to 
20
20
.

Time = 
20
20
. Process ID 
4
4
 is added to the heap. There are no more processes to read from the input. Process ID 
4
4
 has the earliest deadline of those on the heap (despite being the last one read in), so it is the highest-priority process. It is able to be run, so it is removed from the heap and run, and the time advances by 
5
5
 ticks to 
25
25
.

Time = 
25
25
. The highest-priority process (ID 
2
2
) has deadline 
30
30
 but requires 
10
10
 ticks, so it cannot run, and is skipped. The time advances by 
1
1
 tick to 
26
26
.

Time = 
26
26
. The last remaining process on the heap can be run, so it is run. The time advances by 
10
10
 ticks to 
36
36
.

Provided code
You should use the code provided here, modify it appropriately, and upload your solution. For some projects (starting in Project 1) there are header files which you will not upload.

arrayheap-prof-proj5.h
arrayheap-student-proj5.h
process-proj5.h
Sample input files
Use these sample input files to compare the output of your solution to the correct output. You can get the correct output by running the input through one of the sample executables. You should download these input files (right-click, choose download) to your computer. Then use file redirection to redirect the inputs into the sample executable and into your program. You should also use file redirection to capture the outputs from these programs. Then compare your output with the correct output with a diff utility. Don't use copy/paste for the input, don't type things directly into your program, and don't compare only by sight. Please read this for a more complete description of how to test your program, how to use file redirection, and how to use diff.

input-1.txt
input-2.txt
input-3.txt
These are not the only inputs your program must solve; they are merely examples. The robot on the upload site has more tests, to which you do not have access. Therefore, making your own tests is essential.

Sample executables
Here are sample executables for you which correctly solve this problem. When you design test cases, you can judge your output against the output from the correct solution. Here is a correct solution in various compiled formats:

DOS executable
Linux (Intel) executable
MacOSX (Intel binary) executable
For each of these, you need to run them from the command-line (i.e. DOS or bash or Terminal.app). You can't just download them and double-click them to run. Also, for the linux and OSX binaries, after you've downloaded them you need to make sure that they are executable. To do this, from the command line type chmod +x file, where file is the name of the program you downloaded.

If you give a command-line argument to these executables, they will print extra information about how it is processing the input. For example, this will execute the program like normal, redirecting input from a file called my_input.txt:

% project5_solution_dos.exe < my_input.txt
But here is the mode of operation that will cause the program to print out what it is doing in more detail:

% project5_solution_dos.exe printMore < my_input.txt
The command-line argument doesn't have to be the word "printMore", it can be anything.
